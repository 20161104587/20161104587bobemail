<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.imnu.bobEmail.mapper.FriendsMapper">
  <resultMap id="BaseResultMap" type="com.imnu.bobEmail.pojo.Friends">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="userid" jdbcType="INTEGER" property="userid" />
    <result column="friendid" jdbcType="INTEGER" property="friendid" />
    <result column="addtime" jdbcType="TIMESTAMP" property="addtime" />
  </resultMap>
  
   <resultMap id="friends" type="com.imnu.bobEmail.pojo.Users">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="truename" jdbcType="VARCHAR" property="truename" />
    <result column="sex" jdbcType="CHAR" property="sex" />
    <result column="tel" jdbcType="VARCHAR" property="tel" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="deparmentid" jdbcType="INTEGER" property="deparmentid" />
    <result column="isadmin" jdbcType="BIT" property="isadmin" />
    <result column="addtime" jdbcType="TIMESTAMP" property="addtime" />
    <result column="depname" jdbcType="VARCHAR" property="depname" />
    <result column="deprole" jdbcType="VARCHAR" property="deprole" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, userid, friendid, addtime
  </sql>
  <select id="selectByExample" parameterType="com.imnu.bobEmail.pojo.FriendsExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from friends
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from friends
    where id = #{id,jdbcType=INTEGER}
  </select>
  
    <select id="checkfriend" parameterType="java.lang.Integer" resultMap="friends">
select s.*,f.addtime,d.depname,d.deprole  from users s,friends f,department d
where f.friendid = s.id  and s.deparmentid=d.depid and f.userid =#{parseInt,jdbcType=INTEGER}
  </select>
 
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from friends
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <delete id="deletefriend" parameterType="java.lang.Integer">
    delete from friends
    where userid = #{parseInt,jdbcType=INTEGER} and friendid = #{parseInt2,jdbcType=INTEGER}
  </delete>
  
  <delete id="deleteByExample" parameterType="com.imnu.bobEmail.pojo.FriendsExample">
    delete from friends
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.imnu.bobEmail.pojo.Friends">
    insert into friends (id, userid, friendid, 
      addtime)
    values (#{id,jdbcType=INTEGER}, #{userid,jdbcType=INTEGER}, #{friendid,jdbcType=INTEGER}, 
      #{addtime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.imnu.bobEmail.pojo.Friends">
    insert into friends
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userid != null">
        userid,
      </if>
      <if test="friendid != null">
        friendid,
      </if>
      <if test="addtime != null">
        addtime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userid != null">
        #{userid,jdbcType=INTEGER},
      </if>
      <if test="friendid != null">
        #{friendid,jdbcType=INTEGER},
      </if>
      <if test="addtime != null">
        #{addtime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.imnu.bobEmail.pojo.FriendsExample" resultType="java.lang.Long">
    select count(*) from friends
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update friends
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.userid != null">
        userid = #{record.userid,jdbcType=INTEGER},
      </if>
      <if test="record.friendid != null">
        friendid = #{record.friendid,jdbcType=INTEGER},
      </if>
      <if test="record.addtime != null">
        addtime = #{record.addtime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update friends
    set id = #{record.id,jdbcType=INTEGER},
      userid = #{record.userid,jdbcType=INTEGER},
      friendid = #{record.friendid,jdbcType=INTEGER},
      addtime = #{record.addtime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.imnu.bobEmail.pojo.Friends">
    update friends
    <set>
      <if test="userid != null">
        userid = #{userid,jdbcType=INTEGER},
      </if>
      <if test="friendid != null">
        friendid = #{friendid,jdbcType=INTEGER},
      </if>
      <if test="addtime != null">
        addtime = #{addtime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.imnu.bobEmail.pojo.Friends">
    update friends
    set userid = #{userid,jdbcType=INTEGER},
      friendid = #{friendid,jdbcType=INTEGER},
      addtime = #{addtime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>