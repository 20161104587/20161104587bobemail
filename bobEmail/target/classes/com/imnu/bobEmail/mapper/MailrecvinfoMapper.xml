<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.imnu.bobEmail.mapper.MailrecvinfoMapper">
  <resultMap id="BaseResultMap" type="com.imnu.bobEmail.pojo.Mailrecvinfo">
    <id column="recvid" jdbcType="INTEGER" property="recvid" />
    <result column="mailid" jdbcType="INTEGER" property="mailid" />
    <result column="receiverid" jdbcType="INTEGER" property="receiverid" />
    <result column="readfalg" jdbcType="INTEGER" property="readfalg" />
    <result column="state" jdbcType="INTEGER" property="state" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    recvid, mailid, receiverid, readfalg, state
  </sql>
  <select id="selectByExample" parameterType="com.imnu.bobEmail.pojo.MailrecvinfoExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from mailrecvinfo
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from mailrecvinfo
    where recvid = #{recvid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from mailrecvinfo
    where recvid = #{recvid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.imnu.bobEmail.pojo.MailrecvinfoExample">
    delete from mailrecvinfo
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.imnu.bobEmail.pojo.Mailrecvinfo">
    insert into mailrecvinfo (recvid, mailid, receiverid, 
      readfalg, state)
    values (#{recvid,jdbcType=INTEGER}, #{mailid,jdbcType=INTEGER}, #{receiverid,jdbcType=INTEGER}, 
      #{readfalg,jdbcType=INTEGER}, #{state,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.imnu.bobEmail.pojo.Mailrecvinfo">
    insert into mailrecvinfo
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="recvid != null">
        recvid,
      </if>
      <if test="mailid != null">
        mailid,
      </if>
      <if test="receiverid != null">
        receiverid,
      </if>
      <if test="readfalg != null">
        readfalg,
      </if>
      <if test="state != null">
        state,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="recvid != null">
        #{recvid,jdbcType=INTEGER},
      </if>
      <if test="mailid != null">
        #{mailid,jdbcType=INTEGER},
      </if>
      <if test="receiverid != null">
        #{receiverid,jdbcType=INTEGER},
      </if>
      <if test="readfalg != null">
        #{readfalg,jdbcType=INTEGER},
      </if>
      <if test="state != null">
        #{state,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.imnu.bobEmail.pojo.MailrecvinfoExample" resultType="java.lang.Long">
    select count(*) from mailrecvinfo
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update mailrecvinfo
    <set>
      <if test="record.recvid != null">
        recvid = #{record.recvid,jdbcType=INTEGER},
      </if>
      <if test="record.mailid != null">
        mailid = #{record.mailid,jdbcType=INTEGER},
      </if>
      <if test="record.receiverid != null">
        receiverid = #{record.receiverid,jdbcType=INTEGER},
      </if>
      <if test="record.readfalg != null">
        readfalg = #{record.readfalg,jdbcType=INTEGER},
      </if>
      <if test="record.state != null">
        state = #{record.state,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update mailrecvinfo
    set recvid = #{record.recvid,jdbcType=INTEGER},
      mailid = #{record.mailid,jdbcType=INTEGER},
      receiverid = #{record.receiverid,jdbcType=INTEGER},
      readfalg = #{record.readfalg,jdbcType=INTEGER},
      state = #{record.state,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.imnu.bobEmail.pojo.Mailrecvinfo">
    update mailrecvinfo
    <set>
      <if test="mailid != null">
        mailid = #{mailid,jdbcType=INTEGER},
      </if>
      <if test="receiverid != null">
        receiverid = #{receiverid,jdbcType=INTEGER},
      </if>
      <if test="readfalg != null">
        readfalg = #{readfalg,jdbcType=INTEGER},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=INTEGER},
      </if>
    </set>
    where recvid = #{recvid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.imnu.bobEmail.pojo.Mailrecvinfo">
    update mailrecvinfo
    set mailid = #{mailid,jdbcType=INTEGER},
      receiverid = #{receiverid,jdbcType=INTEGER},
      readfalg = #{readfalg,jdbcType=INTEGER},
      state = #{state,jdbcType=INTEGER}
    where recvid = #{recvid,jdbcType=INTEGER}
  </update>
    <update id="updateRevEmailid" parameterType="java.lang.Integer">
    update mailrecvinfo
    set receiverid = #{id,jdbcType=INTEGER}
    where mailid = #{mailid,jdbcType=INTEGER}
  </update>
    <update id="updateEmaireadfalg" parameterType="java.lang.Integer">
    update mailrecvinfo
    set readfalg = '2'
    where mailid = #{parseInt,jdbcType=INTEGER} and receiverid= #{parseInt2,jdbcType=INTEGER}
  </update>
  
</mapper>